//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Client", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class Client : object
    {
        
        private ServiceReference.Request[] RequestsField;
        
        private int idField;
        
        private string nameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.Request[] Requests
        {
            get
            {
                return this.RequestsField;
            }
            set
            {
                this.RequestsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Request", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class Request : object
    {
        
        private ServiceReference.Client ClientField;
        
        private ServiceReference.Service[] ServicesField;
        
        private int client_idField;
        
        private int idField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.Client Client
        {
            get
            {
                return this.ClientField;
            }
            set
            {
                this.ClientField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.Service[] Services
        {
            get
            {
                return this.ServicesField;
            }
            set
            {
                this.ServicesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int client_id
        {
            get
            {
                return this.client_idField;
            }
            set
            {
                this.client_idField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class Service : object
    {
        
        private ServiceReference.Request[] RequestsField;
        
        private int idField;
        
        private string nameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReference.Request[] Requests
        {
            get
            {
                return this.RequestsField;
            }
            set
            {
                this.RequestsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ClFind", ReplyAction="http://tempuri.org/IService/ClFindResponse")]
        System.Threading.Tasks.Task<string> ClFindAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ClCreate", ReplyAction="http://tempuri.org/IService/ClCreateResponse")]
        System.Threading.Tasks.Task ClCreateAsync(ServiceReference.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ClUpdate", ReplyAction="http://tempuri.org/IService/ClUpdateResponse")]
        System.Threading.Tasks.Task<bool> ClUpdateAsync(ServiceReference.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ClDelete", ReplyAction="http://tempuri.org/IService/ClDeleteResponse")]
        System.Threading.Tasks.Task<bool> ClDeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReqFind", ReplyAction="http://tempuri.org/IService/ReqFindResponse")]
        System.Threading.Tasks.Task<string> ReqFindAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReqCreate", ReplyAction="http://tempuri.org/IService/ReqCreateResponse")]
        System.Threading.Tasks.Task ReqCreateAsync(ServiceReference.Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReqUpdate", ReplyAction="http://tempuri.org/IService/ReqUpdateResponse")]
        System.Threading.Tasks.Task<bool> ReqUpdateAsync(ServiceReference.Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReqDelete", ReplyAction="http://tempuri.org/IService/ReqDeleteResponse")]
        System.Threading.Tasks.Task<bool> ReqDeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SerFind", ReplyAction="http://tempuri.org/IService/SerFindResponse")]
        System.Threading.Tasks.Task<string> SerFindAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SerCreate", ReplyAction="http://tempuri.org/IService/SerCreateResponse")]
        System.Threading.Tasks.Task SerCreateAsync(ServiceReference.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SerUpdate", ReplyAction="http://tempuri.org/IService/SerUpdateResponse")]
        System.Threading.Tasks.Task<bool> SerUpdateAsync(ServiceReference.Service service);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SerDelete", ReplyAction="http://tempuri.org/IService/SerDeleteResponse")]
        System.Threading.Tasks.Task<bool> SerDeleteAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IServiceChannel : ServiceReference.IService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ServiceReference.IService>, ServiceReference.IService
    {
        
        /// <summary>
        /// Реализуйте этот разделяемый метод для настройки конечной точки службы.
        /// </summary>
        /// <param name="serviceEndpoint">Настраиваемая конечная точка</param>
        /// <param name="clientCredentials">Учетные данные клиента.</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceClient() : 
                base(ServiceClient.GetDefaultBinding(), ServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), ServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> ClFindAsync(int id)
        {
            return base.Channel.ClFindAsync(id);
        }
        
        public System.Threading.Tasks.Task ClCreateAsync(ServiceReference.Client client)
        {
            return base.Channel.ClCreateAsync(client);
        }
        
        public System.Threading.Tasks.Task<bool> ClUpdateAsync(ServiceReference.Client client)
        {
            return base.Channel.ClUpdateAsync(client);
        }
        
        public System.Threading.Tasks.Task<bool> ClDeleteAsync(int id)
        {
            return base.Channel.ClDeleteAsync(id);
        }
        
        public System.Threading.Tasks.Task<string> ReqFindAsync(int id)
        {
            return base.Channel.ReqFindAsync(id);
        }
        
        public System.Threading.Tasks.Task ReqCreateAsync(ServiceReference.Request request)
        {
            return base.Channel.ReqCreateAsync(request);
        }
        
        public System.Threading.Tasks.Task<bool> ReqUpdateAsync(ServiceReference.Request request)
        {
            return base.Channel.ReqUpdateAsync(request);
        }
        
        public System.Threading.Tasks.Task<bool> ReqDeleteAsync(int id)
        {
            return base.Channel.ReqDeleteAsync(id);
        }
        
        public System.Threading.Tasks.Task<string> SerFindAsync(int id)
        {
            return base.Channel.SerFindAsync(id);
        }
        
        public System.Threading.Tasks.Task SerCreateAsync(ServiceReference.Service service)
        {
            return base.Channel.SerCreateAsync(service);
        }
        
        public System.Threading.Tasks.Task<bool> SerUpdateAsync(ServiceReference.Service service)
        {
            return base.Channel.SerUpdateAsync(service);
        }
        
        public System.Threading.Tasks.Task<bool> SerDeleteAsync(int id)
        {
            return base.Channel.SerDeleteAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:53097/Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("Не удалось найти конечную точку с именем \"{0}\".", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IService,
        }
    }
}
